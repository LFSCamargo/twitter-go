type PageInfo {
  pageSize: Int!
  hasNextPage: Boolean!
}

type Reply {
  id: ID!
  text: String!
  user: User!
  likes: [User!]!
}

type Tweet {
  id: ID!
  text: String!
  user: User!
  likes: [User!]!
  replies(input: PaginationInput): RepliesPaginationOutput
}

type User {
  id: ID!
  username: String!
  email: String!
  picture: String!
}

input CreateTweet {
  text: String!
}

input RegisterInput {
  email: String!
  password: String!
  picture: String!
  username: String!
}

input LoginInput {
  email: String!
  password: String!
}

input PaginationInput {
  first: Int!
}

type TokenOutput {
  token: String!
}

type MessageOutput {
  message: String!
}

type TweetsPaginationOutput {
  pageInfo: PageInfo!
  tweets: [Tweet!]!
}

type RepliesPaginationOutput {
  pageInfo: PageInfo!
  replies: [Reply!]!
}

type Mutation {
  login(input: LoginInput!): TokenOutput
  register(input: RegisterInput!): TokenOutput
  addReply(input: CreateTweet!, tweetID: ID!): Reply
  deleteReply(input: ID!): MessageOutput
  createTweet(input: CreateTweet!): Tweet
  deleteTweet(id: ID!): MessageOutput
  likeTweet(id: ID!): Tweet
  likeReply(id: ID!): Reply
}

type Query {
  me: User!
  reply(id: String!): Reply
  tweets(input: PaginationInput): TweetsPaginationOutput
  tweet(id: String!): Tweet
}
